# main.py
# ============================================
# Este script principal orquesta el modelado, an√°lisis y visualizaci√≥n
# de la estructura. Importa y coordina las funciones de los m√≥dulos
# auxiliares para construir el modelo completo, ejecutar el an√°lisis
# y presentar los resultados.
#
# Flujo principal mejorado:
# 1. Entrada de datos con validaciones robustas
# 2. Definici√≥n de materiales y secciones personalizables
# 3. Creaci√≥n de geometr√≠a (nodos, columnas, vigas)
# 4. Discretizaci√≥n de losas con mallas configurables
# 5. Aplicaci√≥n de cargas distribuidas y combinaciones
# 6. An√°lisis estructural con manejo de errores
# 7. Visualizaci√≥n avanzada y did√°ctica
# 8. Generaci√≥n de reportes completos
# ============================================

import openseespy.opensees as ops
import sys
import traceback
import input_data
import geometry
import sections
import slabs
import loads
import analysis
import visualization
import results

def print_header():
    """Imprime el encabezado del programa."""
    print("=" * 80)
    print("            AN√ÅLISIS ESTRUCTURAL MODULAR - OpenSeesPy")
    print("                   Sistema Modular Escalable")
    print("=" * 80)
    print("Edificios de m√∫ltiples niveles con losas discretizadas")
    print("An√°lisis completo: geometr√≠a ‚Üí cargas ‚Üí an√°lisis ‚Üí resultados")
    print("=" * 80)

def get_execution_mode():
    """
    Solicita al usuario el modo de ejecuci√≥n del programa.
    
    Returns:
        tuple: (interactive, quick_test, load_config)
    """
    print("\n=== MODO DE EJECUCI√ìN ===")
    print("Seleccione el modo de ejecuci√≥n:")
    print("1. Modo Interactivo Completo (personalizar todo)")
    print("2. Modo R√°pido de Prueba (valores por defecto)")
    print("3. Cargar configuraci√≥n desde archivo")
    
    while True:
        try:
            choice = int(input("Seleccione una opci√≥n (1-3): "))
            if choice == 1:
                return True, False, None
            elif choice == 2:
                return False, True, None
            elif choice == 3:
                config_file = input("Ingrese la ruta del archivo de configuraci√≥n: ").strip()
                return False, False, config_file
            else:
                print("Seleccione una opci√≥n v√°lida (1-3)")
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido")

def main():
    """Funci√≥n principal del programa."""
    try:
        # Mostrar encabezado
        print_header()
        
        # Obtener modo de ejecuci√≥n
        interactive, quick_test, config_file = get_execution_mode()
        
        if quick_test:
            print("\nüöÄ Modo de prueba r√°pida activado - usando valores por defecto")
        elif config_file:
            print(f"\nüìÅ Cargando configuraci√≥n desde: {config_file}")
        else:
            print("\n‚öôÔ∏è  Modo interactivo activado - personalizar√° todas las opciones")

        # Limpiar cualquier modelo anterior y crear uno nuevo
        print("\n=== INICIALIZANDO MODELO OPENSEESPY ===")
        ops.wipe()
        ops.model('basic', '-ndm', 3, '-ndf', 6)
        print("‚úì Modelo 3D creado (6 DOF por nodo)")

        # 1. Entrada de datos geom√©tricos
        print("\n" + "="*60)
        print("PASO 1: CONFIGURACI√ìN GEOM√âTRICA")
        print("="*60)
        
        geometry_data = input_data.get_building_geometry_data(
            interactive=interactive, 
            config_file=config_file
        )

        # 2. Definici√≥n de secciones y materiales
        print("\n" + "="*60)
        print("PASO 2: DEFINICI√ìN DE MATERIALES Y SECCIONES")
        print("="*60)
        
        section_properties = sections.define_sections(
            interactive=interactive,
            material_choice="concreto_f21" if not interactive else None
        )

        # 3. Configuraci√≥n de intensidades de carga
        print("\n" + "="*60)
        print("PASO 3: CONFIGURACI√ìN DE CARGAS")
        print("="*60)
        
        load_intensities = loads.get_load_intensities(interactive=interactive)

        # Propiedades de material y masa para nodos y elementos
        E_material = section_properties["E"]
        massX = 0.49  # Masa en direcci√≥n X (ton)
        M = 0         # Masa adicional para elementos (ton)
        massType = "-lMass"  # Tipo de masa (masa distribuida)

        # 4. Creaci√≥n de nodos
        print("\n" + "="*60)
        print("PASO 4: GENERACI√ìN DE NODOS")
        print("="*60)
        
        total_nodes = geometry.create_nodes(geometry_data, E_material, massX, M, massType)

        # 5. Creaci√≥n de columnas
        print("\n" + "="*60)
        print("PASO 5: GENERACI√ìN DE COLUMNAS")
        print("="*60)
        
        total_columns, column_elements_ids, next_ele_tag_after_columns = geometry.create_columns(
            geometry_data, E_material, M, massType,
            section_properties["A_col"], section_properties["Iz_col"],
            section_properties["Iy_col"], section_properties["J_col"]
        )

        # 6. Creaci√≥n de vigas
        print("\n" + "="*60)
        print("PASO 6: GENERACI√ìN DE VIGAS")
        print("="*60)
        
        total_beams_x, beam_elements_x_ids, total_beams_y, beam_elements_y_ids, next_ele_tag_after_beams = geometry.create_beams(
            geometry_data, E_material, M, massType,
            section_properties["A_viga"], section_properties["Iz_viga"],
            section_properties["Iy_viga"], section_properties["J_viga"],
            next_ele_tag_after_columns, total_nodes
        )

        # 7. Creaci√≥n de losas
        print("\n" + "="*60)
        print("PASO 7: DISCRETIZACI√ìN DE LOSAS")
        print("="*60)
        
        total_slabs_elements, slab_elements_ids, next_ele_tag_after_slabs = slabs.create_slabs(
            geometry_data, section_properties, next_ele_tag_after_beams
        )

        # Resumen del modelo creado
        total_elements = total_columns + total_beams_x + total_beams_y + total_slabs_elements
        print(f"\nüèóÔ∏è  RESUMEN DEL MODELO GENERADO:")
        print(f"   üìä Total de nodos: {total_nodes}")
        print(f"   üèóÔ∏è  Total de elementos: {total_elements}")
        print(f"      - Columnas: {total_columns}")
        print(f"      - Vigas X: {total_beams_x}")
        print(f"      - Vigas Y: {total_beams_y}")
        print(f"      - Elementos de losa: {total_slabs_elements}")

        # 8. Aplicaci√≥n de cargas
        print("\n" + "="*60)
        print("PASO 8: APLICACI√ìN DE CARGAS")
        print("="*60)
        
        loads.apply_loads(
            geometry_data=geometry_data,
            load_intensities=load_intensities,
            beam_elements_x=beam_elements_x_ids,
            beam_elements_y=beam_elements_y_ids,
            total_nodes=total_nodes,
            interactive=interactive,
            combination="service"
        )

        # 9. An√°lisis estructural
        print("\n" + "="*60)
        print("PASO 9: AN√ÅLISIS ESTRUCTURAL")
        print("="*60)
        
        analysis.run_analysis()

        # 10. Visualizaci√≥n
        print("\n" + "="*60)
        print("PASO 10: VISUALIZACI√ìN DE RESULTADOS")
        print("="*60)
        
        if interactive:
            show_plots = input("\n¬øDesea generar y mostrar gr√°ficos? (s/n): ").lower().strip()
            generate_plots = show_plots in ['s', 'si', 's√≠', 'y', 'yes']
        else:
            generate_plots = not quick_test  # No mostrar gr√°ficos en modo de prueba r√°pida

        if generate_plots:
            print("üé® Generando visualizaciones...")
            
            # Modelo y deformada
            visualization.plot_model_and_defo(geometry_data["num_floor"], total_nodes, total_elements)
            
            # Secciones extruidas
            visualization.plot_extruded_sections(geometry_data, section_properties, 
                                               column_elements_ids, beam_elements_x_ids, beam_elements_y_ids)
            
            # Detalles de secciones
            visualization.plot_section_details(section_properties)
            
            # Comparaci√≥n de secciones
            visualization.plot_section_comparison(section_properties)
            
            # Diagramas de fuerzas internas
            visualization.plot_section_force_diagrams()
        else:
            print("‚è© Visualizaci√≥n omitida")

        # 11. Generaci√≥n de resultados
        print("\n" + "="*60)
        print("PASO 11: GENERACI√ìN DE REPORTES")
        print("="*60)
        
        if interactive:
            generate_reports = input("\n¬øDesea generar reportes CSV de resultados? (s/n): ").lower().strip()
            create_reports = generate_reports in ['s', 'si', 's√≠', 'y', 'yes']
        else:
            create_reports = True

        if create_reports:
            print("üìä Generando reportes de resultados...")
            results.generate_results(total_nodes, column_elements_ids, 
                                    beam_elements_x_ids, beam_elements_y_ids, slab_elements_ids)
        else:
            print("‚è© Generaci√≥n de reportes omitida")

        # Mostrar figura de referencia al final para consulta del CSV
        if create_reports:
            visualization.show_reference_figure()

        # Finalizaci√≥n exitosa
        print("\n" + "="*80)
        print("üéâ PROCESO COMPLETADO EXITOSAMENTE")
        print("="*80)
        print("‚úÖ El modelo OpenSeesPy ha sido creado, analizado y procesado")
        print(f"üìà Edificio de {geometry_data['num_floor']} pisos con {total_elements} elementos")
        
        if create_reports:
            print("üìÑ Reportes CSV generados en el directorio actual")
            print("üìã Figura de referencia mostrada para consulta de elementos")
        
        print("\nüí° Puntos de expansi√≥n disponibles:")
        print("   üîπ An√°lisis s√≠smico y de viento")
        print("   üîπ Elementos adicionales (muros, escaleras)")
        print("   üîπ Optimizaci√≥n autom√°tica de dise√±o")
        print("   üîπ Interfaz gr√°fica de usuario")
        print("="*80)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå ERROR DURANTE LA EJECUCI√ìN:")
        print(f"   {str(e)}")
        print(f"\nüîç Informaci√≥n detallada del error:")
        print("-" * 50)
        traceback.print_exc()
        print("-" * 50)
        print("\nüí≠ Posibles soluciones:")
        print("   ‚Ä¢ Verificar que OpenSeesPy est√© instalado correctamente")
        print("   ‚Ä¢ Revisar los valores de entrada")
        print("   ‚Ä¢ Consultar la documentaci√≥n del m√≥dulo correspondiente")
        sys.exit(1)

if __name__ == "__main__":
    main()

# --- Puntos para escalar el c√≥digo: General ---
# - Implementar una interfaz gr√°fica de usuario (GUI) para la entrada de datos
# - Permitir la importaci√≥n de geometr√≠a desde archivos CAD/BIM (DXF, IFC)
# - A√±adir m√°s tipos de elementos (muros, cimentaciones, voladizos, escaleras)
# - Integrar an√°lisis s√≠smico y de viento seg√∫n normativas
# - Desarrollar un m√≥dulo de optimizaci√≥n de dise√±o autom√°tico
# - Mejorar la gesti√≥n de unidades y la conversi√≥n entre sistemas
# - Implementar an√°lisis no lineal y din√°mico
# - A√±adir soporte para m√∫ltiples materiales en una estructura
# - Desarrollar m√≥dulos de dise√±o seg√∫n normativas espec√≠ficas
# - Implementar an√°lisis de sensibilidad y confiabilidad
