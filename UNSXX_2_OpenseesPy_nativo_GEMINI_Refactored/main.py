
# main.py
# ============================================
# Este script principal orquesta el modelado, an√°lisis y visualizaci√≥n
# de la estructura. Importa y coordina las funciones de los m√≥dulos
# auxiliares para construir el modelo completo, ejecutar el an√°lisis
# y presentar los resultados.
#
# Flujo principal mejorado:
# 1. Entrada de datos con validaciones robustas
# 2. Definici√≥n de materiales y secciones personalizables
# 3. Creaci√≥n de geometr√≠a (nodos, columnas, vigas)
# 4. Discretizaci√≥n de losas con mallas configurables
# 5. Aplicaci√≥n de cargas distribuidas y combinaciones
# 6. An√°lisis estructural con manejo de errores
# 7. Visualizaci√≥n avanzada y did√°ctica
# 8. Generaci√≥n de reportes completos
# ============================================

import openseespy.opensees as ops
import sys
import traceback
import input_data
import geometry
import sections
import slabs
import loads
import analysis
import visualization_new as visualization
import results_enhanced as results
import advanced_config
import enhanced_geometry
import multi_analysis

def print_header():
    """Imprime el encabezado del programa."""
    print("=" * 80)
    print("            AN√ÅLISIS ESTRUCTURAL MODULAR - OpenSeesPy")
    print("                   Sistema Modular Escalable")
    print("=" * 80)
    print("Edificios de m√∫ltiples niveles con losas discretizadas")
    print("An√°lisis completo: geometr√≠a ‚Üí cargas ‚Üí an√°lisis ‚Üí resultados")
    print("=" * 80)

def get_execution_mode():
    """
    Solicita al usuario el modo de ejecuci√≥n del programa.
    
    Returns:
        tuple: (interactive, quick_test, load_config)
    """
    print("\n=== MODO DE EJECUCI√ìN ===")
    print("Seleccione el modo de ejecuci√≥n:")
    print("1. Modo Interactivo Completo (personalizar todo)")
    print("2. Modo R√°pido de Prueba (valores por defecto)")
    print("3. Cargar configuraci√≥n desde archivo")
    
    while True:
        try:
            choice = int(input("Seleccione una opci√≥n (1-3): "))
            if choice == 1:
                return True, False, None
            elif choice == 2:
                return False, True, None
            elif choice == 3:
                config_file = input("Ingrese la ruta del archivo de configuraci√≥n: ").strip()
                return False, False, config_file
            else:
                print("Seleccione una opci√≥n v√°lida (1-3)")
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido")

def main():
    """Funci√≥n principal del programa."""
    try:
        # Mostrar encabezado
        print_header()
        
        # Obtener modo de ejecuci√≥n
        interactive, quick_test, config_file = get_execution_mode()
        
        if quick_test:
            print("\nüöÄ Modo de prueba r√°pida activado - usando valores por defecto")
        elif config_file:
            print(f"\nüìÅ Cargando configuraci√≥n desde: {config_file}")
        else:
            print("\n‚öôÔ∏è  Modo interactivo activado - personalizar√° todas las opciones")

        # Limpiar cualquier modelo anterior y crear uno nuevo
        print("\n=== INICIALIZANDO MODELO OPENSEESPY ===")
        try:
            ops.wipe()
            ops.model('basic', '-ndm', 3, '-ndf', 6)
            print("‚úì Modelo 3D creado (6 DOF por nodo)")
        except Exception as e:
            print(f"‚ö†Ô∏è Error inicializando modelo: {e}")
            print("Continuando con el modelo existente...")

        # 1. Entrada de datos geom√©tricos
        print("\n" + "="*60)
        print("PASO 1: CONFIGURACI√ìN GEOM√âTRICA")
        print("="*60)
        
        geometry_data = input_data.get_building_geometry_data(
            interactive=interactive, 
            config_file=config_file
        )
        
        # 1.5. Configuraciones avanzadas (solo en modo interactivo)
        column_config = None
        cantilever_config = None
        slab_config = None
        
        if interactive:
            print("\n" + "="*60)
            print("PASO 1.5: CONFIGURACIONES AVANZADAS")
            print("="*60)
            
            # Configuraci√≥n de columnas
            column_choice = advanced_config.column_configuration_menu()
            
            if column_choice == '1':
                column_config = advanced_config.get_uniform_column_section()
            elif column_choice == '2':
                column_config = advanced_config.get_exterior_interior_column_sections()
            elif column_choice == '3':
                column_config = advanced_config.get_custom_column_groups(geometry_data)
            else:
                print("  Usando configuraci√≥n de columnas por defecto")
            
            # Configuraci√≥n de volados
            cantilever_choice = advanced_config.cantilever_configuration_menu()
            cantilever_config = advanced_config.get_cantilever_config(cantilever_choice, geometry_data)
            
            # Configuraci√≥n de losas
            slab_choice = advanced_config.slab_type_configuration_menu()
            slab_config = advanced_config.get_slab_configuration(slab_choice)
            
            if slab_config is None:
                print("  Usando configuraci√≥n de losa por defecto (maciza 0.20m)")
                slab_config = {
                    'type': 'solid',
                    'thickness': 0.20,
                    'description': 'Losa maciza de 0.20m de espesor (por defecto)',
                    'load_factor': 1.0,
                    'self_weight': 5.0  # 0.20m * 25 kN/m¬≥
                }
            
            # Mostrar resumen y confirmar
            if column_config or (cantilever_config and any(cantilever_config.values())) or slab_config:
                if not advanced_config.display_configuration_summary(column_config or {}, cantilever_config, slab_config):
                    print("‚ö†Ô∏è Configuraci√≥n rechazada. Usando valores por defecto.")
                    column_config = None
                    cantilever_config = {'front': None, 'right': None, 'left': None}
                    slab_config = {
                        'type': 'solid',
                        'thickness': 0.20,
                        'description': 'Losa maciza de 0.20m de espesor (por defecto)',
                        'load_factor': 1.0,
                        'self_weight': 5.0
                    }
        
        if not column_config:
            # Configuraci√≥n por defecto
            column_config = {
                'type': 'uniform',
                'lx_col': 0.30,
                'ly_col': 0.30,
                'A_col': 0.09,
                'Iz_col': 0.000675,
                'Iy_col': 0.000675
            }
            
        if not cantilever_config:
            cantilever_config = {'front': None, 'right': None, 'left': None}
            
        if not slab_config:
            slab_config = {
                'type': 'solid',
                'thickness': 0.20,
                'description': 'Losa maciza de 0.20m de espesor (por defecto)',
                'load_factor': 1.0,
                'self_weight': 5.0  # 0.20m * 25 kN/m¬≥
            }
            
        # Agregar configuraciones al geometry_data
        geometry_data['column_config'] = column_config
        geometry_data['cantilever_config'] = cantilever_config
        geometry_data['slab_config'] = slab_config

        # 2. Definici√≥n de secciones y materiales (solo vigas y losas)
        print("\n" + "="*60)
        print("PASO 2: DEFINICI√ìN DE MATERIALES Y SECCIONES")
        print("="*60)
        
        # Determinar si saltar configuraci√≥n de columnas
        skip_columns = interactive and column_config is not None
        
        section_properties = sections.define_sections(
            interactive=interactive,
            material_choice="concreto_f21" if not interactive else None,
            skip_columns=skip_columns
        )
        
        # Agregar section_properties al geometry_data para enhanced_geometry
        geometry_data['section_properties'] = section_properties

        # 3. Configuraci√≥n de intensidades de carga
        print("\n" + "="*60)
        print("PASO 3: CONFIGURACI√ìN DE CARGAS")
        print("="*60)
        
        load_intensities = loads.get_load_intensities(interactive=interactive, slab_config=slab_config)

        # Propiedades de material y masa para nodos y elementos
        E_material = section_properties["E"]
        massX = 0.49  # Masa en direcci√≥n X (ton)
        M = 0         # Masa adicional para elementos (ton)
        massType = "-lMass"  # Tipo de masa (masa distribuida)

        # 4. Creaci√≥n de nodos mejorada (incluyendo volados)
        print("\n" + "="*60)
        print("PASO 4: GENERACI√ìN DE NODOS MEJORADA")
        print("="*60)
        
        if any(cantilever_config.values()):
            # Usar generaci√≥n mejorada con volados
            total_nodes, node_mapping, extended_x_coords, extended_y_coords, z_coords = enhanced_geometry.generate_enhanced_nodes(
                geometry_data, cantilever_config
            )
            use_enhanced = True
        else:
            # Usar generaci√≥n est√°ndar
            total_nodes = geometry.create_nodes(geometry_data, E_material, massX, M, massType)
            use_enhanced = False

        # 5. Creaci√≥n de columnas mejorada (secciones personalizadas)
        print("\n" + "="*60)
        print("PASO 5: GENERACI√ìN DE COLUMNAS MEJORADA")
        print("="*60)
        
        if use_enhanced:
            column_elements_ids, next_ele_tag_after_columns = enhanced_geometry.generate_enhanced_column_elements(
                node_mapping, geometry_data, column_config, extended_x_coords, extended_y_coords, z_coords
            )
            total_columns = len(column_elements_ids)
        else:
            total_columns, column_elements_ids, next_ele_tag_after_columns = geometry.create_columns(
                geometry_data, E_material, M, massType,
                section_properties["A_col"], section_properties["Iz_col"],
                section_properties["Iy_col"], section_properties["J_col"]
            )

        # 6. Creaci√≥n de vigas mejorada (incluyendo vigas de volado)
        print("\n" + "="*60)
        print("PASO 6: GENERACI√ìN DE VIGAS MEJORADA")
        print("="*60)
        
        if use_enhanced:
            beam_elements_x_ids, beam_elements_y_ids, cantilever_beam_ids, next_ele_tag_after_beams = enhanced_geometry.generate_enhanced_beam_elements(
                node_mapping, geometry_data, cantilever_config, extended_x_coords, extended_y_coords, z_coords, next_ele_tag_after_columns
            )
            total_beams_x = len(beam_elements_x_ids)
            total_beams_y = len(beam_elements_y_ids)
            print(f"    üìä Vigas de volado adicionales: {len(cantilever_beam_ids)}")
        else:
            total_beams_x, beam_elements_x_ids, total_beams_y, beam_elements_y_ids, next_ele_tag_after_beams = geometry.create_beams(
                geometry_data, E_material, M, massType,
                section_properties["A_viga"], section_properties["Iz_viga"],
                section_properties["Iy_viga"], section_properties["J_viga"],
                next_ele_tag_after_columns, total_nodes
            )
            cantilever_beam_ids = []
        
        # 6.5. Verificaci√≥n de condiciones de frontera
        print("\n" + "="*60)
        print("PASO 6.5: VERIFICACI√ìN DE CONDICIONES DE FRONTERA")
        print("="*60)
        
        if use_enhanced:
            print("  Aplicando condiciones de frontera mejoradas...")
            restricted_nodes = enhanced_geometry.apply_enhanced_boundary_conditions(node_mapping, extended_x_coords, extended_y_coords, cantilever_config)
        else:
            print("  Verificando condiciones de frontera est√°ndar...")
            # En geometr√≠a est√°ndar, las restricciones se aplican en create_nodes
            # Solo verificamos que se aplicaron correctamente
            try:
                node_tags = ops.getNodeTags()
                restricted_nodes = 0
                for node in node_tags:
                    coord = ops.nodeCoord(node)
                    if coord[2] < 0.01:  # Nodos en la base (z ‚âà 0)
                        restricted_nodes += 1
                
                if restricted_nodes > 0:
                    print(f"    ‚úÖ {restricted_nodes} nodos restringidos en la base verificados")
                else:
                    print("    ‚ùå ADVERTENCIA: No se detectaron restricciones en la base")
            except Exception as e:
                print(f"    ‚ö†Ô∏è Error verificando restricciones: {e}")
                print("    Continuando sin verificaci√≥n de restricciones...")
                restricted_nodes = 0
        
        if restricted_nodes == 0:
            print("    ‚ùå PROBLEMA CR√çTICO: No hay restricciones suficientes")
            print("    El an√°lisis fallar√° sin restricciones adecuadas")

        # 7. Creaci√≥n de losas
        print("\n" + "="*60)
        print("PASO 7: DISCRETIZACI√ìN DE LOSAS")
        print("="*60)
        
        total_slabs_elements, slab_elements_ids, next_ele_tag_after_slabs = slabs.create_slabs(
            geometry_data, section_properties, next_ele_tag_after_beams
        )

        # Resumen del modelo creado
        total_elements = total_columns + total_beams_x + total_beams_y + total_slabs_elements
        print(f"\nüèóÔ∏è  RESUMEN DEL MODELO GENERADO:")
        print(f"   üìä Total de nodos: {total_nodes}")
        print(f"   üèóÔ∏è  Total de elementos: {total_elements}")
        print(f"      - Columnas: {total_columns}")
        print(f"      - Vigas X: {total_beams_x}")
        print(f"      - Vigas Y: {total_beams_y}")
        print(f"      - Elementos de losa: {total_slabs_elements}")

        # 8. Aplicaci√≥n de cargas
        print("\n" + "="*60)
        print("PASO 8: APLICACI√ìN DE CARGAS")
        print("="*60)
        
        loads.apply_loads(
            geometry_data=geometry_data,
            load_intensities=load_intensities,
            beam_elements_x=beam_elements_x_ids,
            beam_elements_y=beam_elements_y_ids,
            total_nodes=total_nodes,
            interactive=interactive,
            combination="service"
        )

        # 9. An√°lisis estructural
        print("\n" + "="*60)
        print("PASO 9: AN√ÅLISIS ESTRUCTURAL")
        print("="*60)
        
        analysis_successful = analysis.run_analysis()
        
        if not analysis_successful:
            print("\n‚ùå EL AN√ÅLISIS ESTRUCTURAL FALL√ì")
            print("No se pueden generar visualizaciones ni reportes sin un an√°lisis exitoso.")
            print("\nüí° Recomendaciones:")
            print("  ‚Ä¢ Verifique que las dimensiones del edificio sean razonables")
            print("  ‚Ä¢ Aseg√∫rese de que las cargas no sean excesivas")
            print("  ‚Ä¢ Revise que los volados no excedan los l√≠mites recomendados")
            print("  ‚Ä¢ Considere reducir la altura o n√∫mero de pisos")
            return
        
        # IMPORTANTE: Generar reportes inmediatamente despu√©s del an√°lisis exitoso
        # para preservar los resultados antes de cualquier operaci√≥n adicional
        print("\nüöÄ GENERANDO REPORTES DE AN√ÅLISIS PRINCIPAL (inmediatamente)...")
        print("üìä Extrayendo resultados del an√°lisis estructural...")
        try:
            results.generate_enhanced_results(column_elements_ids, 
                                            beam_elements_x_ids, beam_elements_y_ids, slab_elements_ids)
            print("‚úÖ Reportes del an√°lisis principal generados exitosamente")
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando reportes inmediatos: {e}")
            print("Los reportes se intentar√°n generar nuevamente m√°s adelante")

        # 10. Visualizaci√≥n
        print("\n" + "="*60)
        print("PASO 10: VISUALIZACI√ìN DE RESULTADOS")
        print("="*60)
        
        if interactive:
            show_plots = input("\n¬øDesea generar y mostrar gr√°ficos? (s/n): ").lower().strip()
            generate_plots = show_plots in ['s', 'si', 's√≠', 'y', 'yes']
        else:
            generate_plots = not quick_test  # No mostrar gr√°ficos en modo de prueba r√°pida

        if generate_plots:
            print("üé® Generando visualizaciones nuevas y mejoradas...")
            
            # Crear diccionario con listas de elementos
            element_lists = {
                'columns': column_elements_ids,
                'beams_x': beam_elements_x_ids,
                'beams_y': beam_elements_y_ids
            }
            
            # Generar todas las visualizaciones mejoradas
            visualization.generate_all_visualizations(section_properties, element_lists)
        else:
            print("‚è© Visualizaci√≥n omitida")

        # 11. Generaci√≥n de resultados (opcional si ya se generaron)
        print("\n" + "="*60)
        print("PASO 11: GENERACI√ìN DE REPORTES ADICIONALES")
        print("="*60)
        print("‚ÑπÔ∏è Los reportes del an√°lisis principal ya fueron generados inmediatamente")
        print("   despu√©s del an√°lisis para preservar los resultados.")
        
        if interactive:
            print("\n¬øDesea regenerar los reportes CSV? (normalmente no es necesario)")
            generate_reports = input("Regenerar reportes (s/n): ").lower().strip()
            create_reports = generate_reports in ['s', 'si', 's√≠', 'y', 'yes']
        else:
            create_reports = False  # No regenerar en modo autom√°tico

        if create_reports:
            print("üìä Regenerando reportes de resultados...")
            try:
                results.generate_enhanced_results(column_elements_ids, 
                                                beam_elements_x_ids, beam_elements_y_ids, slab_elements_ids)
                print("‚úÖ Reportes regenerados exitosamente")
            except Exception as e:
                print(f"‚ö†Ô∏è Error regenerando reportes: {e}")
        else:
            print("‚è© Regeneraci√≥n de reportes omitida")

        # 12. An√°lisis con combinaciones de cargas ACI (nuevo)
        print("\n" + "="*60)
        print("PASO 12: AN√ÅLISIS CON COMBINACIONES DE CARGAS ACI")
        print("="*60)
        
        if interactive:
            print("\nüèóÔ∏è AN√ÅLISIS AVANZADO CON COMBINACIONES DE CARGAS")
            print("Este an√°lisis ejecuta m√∫ltiples combinaciones seg√∫n ACI 318 para obtener")
            print("las solicitaciones m√°ximas necesarias para el dise√±o estructural.")
            print("\nBeneficios:")
            print("  ‚Ä¢ Solicitaciones m√°ximas para dise√±o de elementos")
            print("  ‚Ä¢ Comparaci√≥n entre diferentes combinaciones de cargas")
            print("  ‚Ä¢ Archivos CSV optimizados para post-procesamiento")
            print("  ‚Ä¢ Cumplimiento con normativas ACI 318")
            
            run_aci_analysis = input("\n¬øDesea ejecutar an√°lisis con combinaciones ACI? (s/n): ").lower().strip()
            perform_aci_analysis = run_aci_analysis in ['s', 'si', 's√≠', 'y', 'yes']
        else:
            # En modo autom√°tico, ejecutar combinaciones b√°sicas
            perform_aci_analysis = True
            print("üöÄ Ejecutando an√°lisis con combinaciones ACI en modo autom√°tico...")

        if perform_aci_analysis:
            print("\nüéØ Iniciando an√°lisis con combinaciones de cargas ACI...")
            
            try:
                # Ejecutar an√°lisis completo con combinaciones
                aci_results = multi_analysis.run_complete_load_combination_analysis(
                    geometry_data=geometry_data,
                    load_intensities=load_intensities,
                    beam_elements_x=beam_elements_x_ids,
                    beam_elements_y=beam_elements_y_ids,
                    interactive=interactive
                )
                
                if aci_results:
                    print("\n‚úÖ AN√ÅLISIS CON COMBINACIONES ACI COMPLETADO EXITOSAMENTE")
                    print("üìÑ Archivos generados:")
                    print("   üéØ maximum_demands_design.csv - Solicitaciones m√°ximas para dise√±o")
                    print("   üìä load_combinations_comparison.csv - Comparaci√≥n detallada")
                    print("   üìà analysis_statistics.csv - Estad√≠sticas por combinaci√≥n")
                    print("   üíæ Archivos est√°ndar actualizados")
                else:
                    print("‚ö†Ô∏è El an√°lisis con combinaciones ACI no se complet√≥ correctamente")
                    
            except Exception as e:
                print(f"‚ùå Error en an√°lisis con combinaciones ACI: {e}")
                print("Continuando con el an√°lisis est√°ndar...")
        else:
            print("‚è© An√°lisis con combinaciones ACI omitido")

        # Mostrar figura de referencia al final para consulta del CSV
        if create_reports:
            visualization.show_reference_figure()

        # Finalizaci√≥n exitosa
        print("\n" + "="*80)
        print("üéâ PROCESO COMPLETADO EXITOSAMENTE")
        print("="*80)
        print("‚úÖ El modelo OpenSeesPy ha sido creado, analizado y procesado")
        print(f"üìà Edificio de {geometry_data['num_floor']} pisos con {total_elements} elementos")
        
        if create_reports:
            print("üìÑ Reportes CSV generados en el directorio actual")
            print("üìã Figura de referencia mostrada para consulta de elementos")
        
        if perform_aci_analysis and aci_results:
            print("üéØ An√°lisis con combinaciones ACI completado - archivos de dise√±o disponibles")
        
        print("\nüí° Puntos de expansi√≥n disponibles:")
        print("   üîπ An√°lisis s√≠smico y de viento")
        print("   üîπ Elementos adicionales (muros, escaleras)")
        print("   üîπ Optimizaci√≥n autom√°tica de dise√±o")
        print("   üîπ Interfaz gr√°fica de usuario")
        print("="*80)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå ERROR DURANTE LA EJECUCI√ìN:")
        print(f"   {str(e)}")
        print(f"\nüîç Informaci√≥n detallada del error:")
        print("-" * 50)
        traceback.print_exc()
        print("-" * 50)
        print("\nüí≠ Posibles soluciones:")
        print("   ‚Ä¢ Verificar que OpenSeesPy est√© instalado correctamente")
        print("   ‚Ä¢ Revisar los valores de entrada")
        print("   ‚Ä¢ Consultar la documentaci√≥n del m√≥dulo correspondiente")
        sys.exit(1)

if __name__ == "__main__":
    main()

# --- Puntos para escalar el c√≥digo: General ---
# - Implementar una interfaz gr√°fica de usuario (GUI) para la entrada de datos
# - Permitir la importaci√≥n de geometr√≠a desde archivos CAD/BIM (DXF, IFC)
# - A√±adir m√°s tipos de elementos (muros, cimentaciones, voladizos, escaleras)
# - Integrar an√°lisis s√≠smico y de viento seg√∫n normativas
# - Desarrollar un m√≥dulo de optimizaci√≥n de dise√±o autom√°tico
# - Mejorar la gesti√≥n de unidades y la conversi√≥n entre sistemas
# - Implementar an√°lisis no lineal y din√°mico
# - A√±adir soporte para m√∫ltiples materiales en una estructura
# - Desarrollar m√≥dulos de dise√±o seg√∫n normativas espec√≠ficas
# - Implementar an√°lisis de sensibilidad y confiabilidad
